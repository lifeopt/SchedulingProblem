#include<iostream>
#include<unordered_map>
#include<set>
#include<string>
using namespace std;

struct Result
{
	int mOrder;
	int mRank;
};

struct Word {
	string mStr;	// 검색어
	int views;	// 조회수
	int relate_idx;	// 연관검색어 집합의 idx
}words[15000];

struct comp_words {
	bool operator()(const int i, const int j) const {
		if (words[i].mStr == words[j].mStr) {
			return words[i].views > words[j].views;
		}
		return words[i].mStr > words[j].mStr;
	}
};

int num_words;

unordered_map<string, int> word_map;	// "단어" - words배열 idx 맵핑
unordered_map<string, int> relate_map;	// "단어" - 관계배열 idx 매핑
set<int, comp_words> sorted_idxs;

int veiws_relate[50]; // 연관검색어의 집합들의 조회수
int num_relates; // 연관검색어의 집합 수

#define LENGTH 8	// 7+1(null character)

void init()
{
	num_words = 0;
	word_map.clear();
	relate_map.clear();
	sorted_idxs.clear();
	num_relates = 0;
	return;
}

void search(char mStr[], int mCount)
{
	string mstr(mStr);
	auto it = word_map.find(mstr);
	if (it == word_map.end()) {	// 신규 단어
		int idx = num_words++;
		words[idx] = { mstr, mCount, -1};	
		word_map[mstr] = idx;
	}
	else {
		it->second += mCount;	// 초회수 증가
	}
}

int count_rank(string in_str, string mStr) {	
	// in_str라는 string이 sorted_idxs에서 ranking 5번째 안에 존재하면 order  return
	

	string in_str;
	int word_idx = word_map[mStr];
	int count = 0;
	for (int i = 0; mStr[i] != '\0'; i++) {
		in_str.push_back(mStr[i]);
		for (auto it: sorted_idxs) {


			words[it->].mStr;

		}
	}
}

Result recommend(char mStr[])
{
	Result ret = { 0, 0 };
	int count = 0;
	for (int i = 0; mStr[i] != '\0'; i++) {
		auto it1 = word_map.find(string(mStr));
		int word_idx = it1->second;
		if (words[word_idx].mStr[i] == mStr[i])
			count++;
		else break;
	//	if (count == )

	//}

	return ret;
}

int relate(char mStr1[], char mStr2[])
{
	auto it1 = word_map.find(string(mStr1));
	auto it2 = word_map.find(string(mStr2));
	int idx1 = it1->second;
	int idx2 = it2->second;
	if (words[idx1].relate_idx != -1 && words[idx2].relate_idx == -1) {
		words[idx2].relate_idx = words[idx1].relate_idx;
		
	}
	else if (words[idx1].relate_idx == -1 && words[idx2].relate_idx != -1) {
		words[idx1].relate_idx = words[idx2].relate_idx;
	}
	else if (words[idx1].relate_idx == -1 && words[idx2].relate_idx == -1) {
		int relate_idx = num_relates++;
		words[idx1].relate_idx = relate_idx;
		words[idx2].relate_idx = relate_idx;
	}
	int sum_views = words[idx1].views + words[idx2].views;
	veiws_relate[words[idx2].relate_idx] = sum_views;
	words[idx1].views = words[idx2].views = sum_views;
	return 0;
}

void rank(char mPrefix[], int mRank, char mReturnStr[])
{
	return;
}
